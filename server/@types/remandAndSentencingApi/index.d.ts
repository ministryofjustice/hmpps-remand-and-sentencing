/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/recall/{recallUuid}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve a recall
     * @description This endpoint will retrieve the details of a recall
     */
    get: operations['getRecall']
    /**
     * Update a recall (or create one with the passed in details)
     * @description This endpoint will update a recall (or create one with the passed in details)
     */
    put: operations['updateRecall']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/legacy/court-case/{courtCaseUuid}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve court case details
     * @description This endpoint will retrieve court case details
     */
    get: operations['get']
    /**
     * Updates a court case
     * @description Synchronise an update of court case from NOMIS into remand and sentencing API.
     */
    put: operations['update']
    post?: never
    /**
     * Deletes a court case
     * @description Synchronise a deletion of court case from NOMIS into remand and sentencing API.
     */
    delete: operations['delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/legacy/court-appearance/{lifetimeUuid}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve court appearance details
     * @description This endpoint will retrieve court appearance details
     */
    get: operations['get_1']
    /**
     * Updates a court appearance
     * @description Synchronise an update of court appearance from NOMIS court events into remand and sentencing API.
     */
    put: operations['update_1']
    post?: never
    /**
     * Delete Appearance
     * @description Synchronise a deletion of court appearance from NOMIS court events into remand and sentencing API.
     */
    delete: operations['delete_1']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/legacy/charge/{lifetimeUuid}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * retrieve a charge
     * @description This endpoint will retrieve charge details.
     */
    get: operations['get_2']
    /**
     * Update a charge
     * @description Synchronise an update of charge from NOMIS Offender charges into remand and sentencing API.
     */
    put: operations['update_2']
    post?: never
    /**
     * Delete Charge
     * @description Synchronise a deletion of charge from NOMIS offender charges into remand and sentencing API.
     */
    delete: operations['delete_2']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/court-case/{courtCaseUuid}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve court case details
     * @description This endpoint will retrieve court case details
     */
    get: operations['getCourtCaseDetails']
    /**
     * Create Court case
     * @description This endpoint will create a court case
     */
    put: operations['putCourtCase']
    post?: never
    /**
     * Delete Court case
     * @description This endpoint will delete a court case
     */
    delete: operations['deleteCourtCase']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/court-case/{courtCaseUuid}/case-references/refresh': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Refresh case references
     * @description This endpoint will refresh case references
     */
    put: operations['refreshCaseReferences']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/court-appearance/{lifetimeUuid}/lifetime': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Create Court appearance
     * @description This endpoint will create a court appearance in a given court case
     */
    put: operations['updateCourtAppearanceByLifetime']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/court-appearance/{appearanceUuid}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve court appearance details
     * @description This endpoint will retrieve court appearance details
     */
    get: operations['getCourtAppearanceDetails']
    /**
     * Create Court appearance
     * @description This endpoint will create a court appearance in a given court case
     */
    put: operations['updateCourtAppearance']
    post?: never
    /**
     * Delete Appearance
     * @description This endpoint will delete an appearance
     */
    delete: operations['deleteAppearance']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/charge/{chargeUuid}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve charge details
     * @description This endpoint will retrieve charge details
     */
    get: operations['getChargeDetails_1']
    /**
     * Create Charge
     * @description This endpoint will create a charge in a given court appearance
     */
    put: operations['updateCharge']
    post?: never
    /**
     * Delete Charge
     * @description This endpoint will delete a charge
     */
    delete: operations['deleteCharge']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/recall': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a recall
     * @description This endpoint will create a recall
     */
    post: operations['createRecall']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/legacy/court-case': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a court case
     * @description Synchronise a creation of court case from NOMIS into remand and sentencing API.
     */
    post: operations['create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/legacy/court-appearance': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a court appearance
     * @description Synchronise a creation of court appearance from NOMIS court events into remand and sentencing API.
     */
    post: operations['create_1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/legacy/charge': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a charge
     * @description Synchronise a creation of charge from NOMIS Offender charges into remand and sentencing API.
     */
    post: operations['create_2']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/court-case': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create Court case
     * @description This endpoint will create a court case
     */
    post: operations['createCourtCase']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/court-appearance': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create Court appearance
     * @description This endpoint will create a court appearance in a given court case
     */
    post: operations['createCourtAppearance']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/court-appearance/{appearanceUuid}/charge': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create Charge in appearance
     * @description This endpoint will create a charge in a given court appearance
     */
    post: operations['createChargeInAppearance']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/charge': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create Charge
     * @description This endpoint will create a charge in a given court appearance
     */
    post: operations['createCharge']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sentence/{sentenceUuid}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve sentence details
     * @description This endpoint will retrieve sentence details
     */
    get: operations['getChargeDetails']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sentence-type/{sentenceTypeUuid}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Sentence type by UUID
     * @description This endpoint will retrieve sentence type by UUID
     */
    get: operations['getSentenceTypeByUuid']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sentence-type/uuid/multiple': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get all sentence types by uuids
     * @description This endpoint will get all sentence types by uuids
     */
    get: operations['getSentenceTypesByIds']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sentence-type/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Search all sentence types
     * @description This endpoint will search all sentence types
     */
    get: operations['searchSentenceTypes']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/recall/person/{prisonerId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve all recalls for a person
     * @description This endpoint will retrieve  all recalls for a person
     */
    get: operations['getRecallsByPrisonerId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/person/{prisonerId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve person details
     * @description This endpoint will retrieve person details
     */
    get: operations['getPersonDetails']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/court-case/{courtCaseUuid}/latest-appearance': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve latest court appearance of court case
     * @description This endpoint will retrieve latest court appearance of court case
     */
    get: operations['getLatestAppearanceDetails']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/court-case/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve all court cases for person
     * @description This endpoint will retrieve all court cases for a person
     */
    get: operations['searchCourtCases']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/charge-outcome/{outcomeUuid}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get charge outcome by UUID
     * @description This endpoint will retrieve charge outcome by UUID
     */
    get: operations['getChargeOutcomeByUuid']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/charge-outcome/uuid/multiple': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get all charge outcomes by uuids
     * @description This endpoint will get all charge outcomes by uuids
     */
    get: operations['getChargeOutcomesByIds']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/charge-outcome/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all charge outcomes
     * @description This endpoint will get all charge outcomes
     */
    get: operations['getAllChargeOutcomes']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appearance-outcome/{outcomeUuid}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get appearance outcome by UUID
     * @description This endpoint will retrieve appearance outcome by UUID
     */
    get: operations['getAppearanceOutcomeByUuid']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appearance-outcome/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all appearance outcomes
     * @description This endpoint will get all appearance outcomes
     */
    get: operations['getAllAppearanceOutcomes']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/court-appearance/{appearanceUuid}/charge/{chargeUuid}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Disassociate charge with appearance
     * @description This endpoint will disassociate a charge with an appearance
     */
    delete: operations['disassociateChargeWithAppearance']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    CreateRecall: {
      prisonerId: string
      /** Format: date */
      recallDate: string
      /** Format: date */
      returnToCustodyDate: string
      /** @enum {string} */
      recallType:
        | 'FOURTEEN_DAY_FIXED_TERM_RECALL'
        | 'TWENTY_EIGHT_DAY_FIXED_TERM_RECALL'
        | 'STANDARD_RECALL'
        | 'HDC_STANDARD_RECALL'
        | 'HDC_FOURTEEN_DAY_RECALL'
        | 'HDC_TWENTY_EIGHT_DAY_RECALL'
      createdByUsername: string
    }
    SaveRecallResponse: {
      /** Format: uuid */
      recallUuid: string
    }
    LegacyCreateCourtCase: {
      prisonerId: string
      active: boolean
    }
    CourtAppearanceLegacyData: {
      eventId?: string
      caseId?: string
      postedDate?: string
      nomisOutcomeCode?: string
      outcomeDescription?: string
      /** Format: date-time */
      nextEventDateTime?: string
    }
    LegacyCreateCourtAppearance: {
      courtCaseUuid: string
      courtCode: string
      /** Format: date */
      appearanceDate: string
      legacyData: components['schemas']['CourtAppearanceLegacyData']
    }
    ChargeLegacyData: {
      postedDate?: string
      nomisOutcomeCode?: string
      outcomeDescription?: string
    }
    LegacyCreateCharge: {
      /** Format: uuid */
      appearanceLifetimeUuid: string
      offenceCode: string
      /** Format: date */
      offenceStartDate: string
      /** Format: date */
      offenceEndDate?: string
      active: boolean
      legacyData: components['schemas']['ChargeLegacyData']
    }
    CaseReferenceLegacyData: {
      offenderCaseReference: string
      updatedDate: string
    }
    CourtCaseLegacyData: {
      caseReferences: components['schemas']['CaseReferenceLegacyData'][]
    }
    CreateCharge: {
      /** Format: uuid */
      appearanceUuid?: string
      /** Format: uuid */
      chargeUuid?: string
      offenceCode: string
      /** Format: date */
      offenceStartDate: string
      /** Format: date */
      offenceEndDate?: string
      /** Format: uuid */
      outcomeUuid?: string
      terrorRelated?: boolean
      sentence?: components['schemas']['CreateSentence']
      legacyData?: components['schemas']['ChargeLegacyData']
    }
    CreateCourtAppearance: {
      courtCaseUuid?: string
      /** Format: uuid */
      appearanceUuid?: string
      /** Format: uuid */
      lifetimeUuid?: string
      /** Format: uuid */
      outcomeUuid?: string
      courtCode: string
      courtCaseReference?: string
      /** Format: date */
      appearanceDate: string
      warrantId?: string
      warrantType: string
      /** Format: int32 */
      taggedBail?: number
      overallSentenceLength?: components['schemas']['CreatePeriodLength']
      nextCourtAppearance?: components['schemas']['CreateNextCourtAppearance']
      charges: components['schemas']['CreateCharge'][]
      /** Format: date */
      overallConvictionDate?: string
      legacyData?: components['schemas']['CourtAppearanceLegacyData']
    }
    CreateCourtCase: {
      prisonerId: string
      appearances: components['schemas']['CreateCourtAppearance'][]
      legacyData?: components['schemas']['CourtCaseLegacyData']
    }
    CreateFineAmount: {
      fineAmount: number
    }
    CreateNextCourtAppearance: {
      /** Format: date */
      appearanceDate: string
      /** @example 16:13:05.009950465 */
      appearanceTime?: string
      courtCode: string
      appearanceType: string
    }
    CreatePeriodLength: {
      /** Format: int32 */
      years?: number
      /** Format: int32 */
      months?: number
      /** Format: int32 */
      weeks?: number
      /** Format: int32 */
      days?: number
      periodOrder: string
      /** @enum {string} */
      type:
        | 'SENTENCE_LENGTH'
        | 'CUSTODIAL_TERM'
        | 'LICENCE_PERIOD'
        | 'TARIFF_LENGTH'
        | 'TERM_LENGTH'
        | 'OVERALL_SENTENCE_LENGTH'
    }
    CreateSentence: {
      /** Format: uuid */
      sentenceUuid?: string
      chargeNumber: string
      periodLengths: components['schemas']['CreatePeriodLength'][]
      sentenceServeType: string
      consecutiveToChargeNumber?: string
      /** Format: uuid */
      consecutiveToSentenceUuid?: string
      /** Format: uuid */
      sentenceTypeId: string
      /** Format: date */
      convictionDate?: string
      fineAmount?: components['schemas']['CreateFineAmount']
    }
    CreateChargeResponse: {
      /** Format: uuid */
      chargeUuid: string
    }
    CreateCourtAppearanceResponse: {
      /** Format: uuid */
      appearanceUuid: string
      eventId?: string
    }
    CreateCourtCaseResponse: {
      courtCaseUuid: string
      appearances: components['schemas']['CreateCourtAppearanceResponse'][]
      charges: components['schemas']['CreateChargeResponse'][]
    }
    LegacyCourtCaseCreatedResponse: {
      courtCaseUuid: string
    }
    LegacyCourtAppearanceCreatedResponse: {
      /** Format: uuid */
      lifetimeUuid: string
      courtCaseUuid: string
      prisonerId: string
    }
    LegacyChargeCreatedResponse: {
      /** Format: uuid */
      lifetimeUuid: string
      courtCaseUuid: string
      prisonerId: string
    }
    FineAmount: {
      fineAmount: number
    }
    PeriodLength: {
      /** Format: int32 */
      years?: number
      /** Format: int32 */
      months?: number
      /** Format: int32 */
      weeks?: number
      /** Format: int32 */
      days?: number
      periodOrder: string
      /** @enum {string} */
      periodLengthType:
        | 'SENTENCE_LENGTH'
        | 'CUSTODIAL_TERM'
        | 'LICENCE_PERIOD'
        | 'TARIFF_LENGTH'
        | 'TERM_LENGTH'
        | 'OVERALL_SENTENCE_LENGTH'
    }
    Sentence: {
      /** Format: uuid */
      sentenceUuid: string
      chargeNumber: string
      periodLengths: components['schemas']['PeriodLength'][]
      sentenceServeType: string
      consecutiveToChargeNumber?: string
      sentenceType: components['schemas']['SentenceType']
      /** Format: date */
      convictionDate?: string
      fineAmount?: components['schemas']['FineAmount']
    }
    SentenceType: {
      /** Format: uuid */
      sentenceTypeUuid: string
      description: string
      /** @enum {string} */
      classification:
        | 'STANDARD'
        | 'EXTENDED'
        | 'SOPC'
        | 'INDETERMINATE'
        | 'BOTUS'
        | 'CIVIL'
        | 'DTO'
        | 'FINE'
        | 'LEGACY'
        | 'NON_CUSTODIAL'
      hintText?: string
    }
    Recall: {
      /** Format: uuid */
      recallUniqueIdentifier: string
      prisonerId: string
      /** Format: date */
      recallDate: string
      /** Format: date */
      returnToCustodyDate: string
      /** @enum {string} */
      recallType:
        | 'FOURTEEN_DAY_FIXED_TERM_RECALL'
        | 'TWENTY_EIGHT_DAY_FIXED_TERM_RECALL'
        | 'STANDARD_RECALL'
        | 'HDC_STANDARD_RECALL'
        | 'HDC_FOURTEEN_DAY_RECALL'
        | 'HDC_TWENTY_EIGHT_DAY_RECALL'
      /** Format: date-time */
      createdAt: string
      createdByUsername: string
    }
    PersonDetails: {
      personId: string
      firstName: string
      lastName: string
      establishment?: string
      cellNumber?: string
      /** Format: date */
      dateOfBirth: string
      pncNumber?: string
      status?: string
    }
    LegacyCourtCase: {
      courtCaseUuid: string
      prisonerId: string
      active: boolean
      legacyData?: components['schemas']['CourtCaseLegacyData']
    }
    LegacyCharge: {
      prisonerId: string
      courtCaseUuid: string
      /** Format: uuid */
      lifetimeUuid: string
      nomisOutcomeCode?: string
      offenceCode: string
      /** Format: date */
      offenceStartDate: string
      /** Format: date */
      offenceEndDate?: string
      legacyData?: components['schemas']['ChargeLegacyData']
    }
    LegacyCourtAppearance: {
      /** Format: uuid */
      lifetimeUuid: string
      courtCaseUuid: string
      prisonerId: string
      nomisOutcomeCode?: string
      courtCode: string
      /** Format: date */
      appearanceDate: string
      legacyData?: components['schemas']['CourtAppearanceLegacyData']
      charges: components['schemas']['LegacyCharge'][]
    }
    Charge: {
      /** Format: uuid */
      chargeUuid: string
      /** Format: uuid */
      lifetimeUuid: string
      offenceCode: string
      /** Format: date */
      offenceStartDate: string
      /** Format: date */
      offenceEndDate?: string
      outcome?: components['schemas']['ChargeOutcome']
      terrorRelated?: boolean
      sentence?: components['schemas']['Sentence']
      legacyData?: components['schemas']['JsonNode']
    }
    ChargeOutcome: {
      /** Format: uuid */
      outcomeUuid: string
      outcomeName: string
      nomisCode: string
      outcomeType: string
      /** Format: int32 */
      displayOrder: number
      isSubList: boolean
    }
    CourtAppearance: {
      /** Format: uuid */
      appearanceUuid: string
      /** Format: uuid */
      lifetimeUuid: string
      outcome?: components['schemas']['CourtAppearanceOutcome']
      courtCode: string
      courtCaseReference?: string
      /** Format: date */
      appearanceDate: string
      warrantId?: string
      warrantType: string
      /** Format: int32 */
      taggedBail?: number
      nextCourtAppearance?: components['schemas']['NextCourtAppearance']
      charges: components['schemas']['Charge'][]
      overallSentenceLength?: components['schemas']['PeriodLength']
      /** Format: date */
      overallConvictionDate?: string
      legacyData?: components['schemas']['JsonNode']
    }
    CourtAppearanceOutcome: {
      /** Format: uuid */
      outcomeUuid: string
      outcomeName: string
      nomisCode: string
      outcomeType: string
      /** Format: int32 */
      displayOrder: number
      /** Format: uuid */
      relatedChargeOutcomeUuid: string
      isSubList: boolean
    }
    CourtCase: {
      prisonerId: string
      courtCaseUuid: string
      /** @enum {string} */
      status: 'ACTIVE' | 'INACTIVE' | 'EDITED' | 'DELETED'
      latestAppearance?: components['schemas']['CourtAppearance']
      appearances: components['schemas']['CourtAppearance'][]
      legacyData?: components['schemas']['JsonNode']
    }
    JsonNode: Record<string, never>
    NextCourtAppearance: {
      /** Format: date */
      appearanceDate: string
      /** @example 16:13:05.009950465 */
      appearanceTime?: string
      courtCode: string
      appearanceType: string
    }
    Pageable: {
      /** Format: int32 */
      page?: number
      /** Format: int32 */
      size?: number
      sort?: string[]
    }
    PageCourtCase: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['CourtCase'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      pageSize?: number
      /** Format: int32 */
      pageNumber?: number
      paged?: boolean
      unpaged?: boolean
    }
    SortObject: {
      direction?: string
      nullHandling?: string
      ascending?: boolean
      property?: string
      ignoreCase?: boolean
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  getRecall: {
    parameters: {
      query?: never
      header?: never
      path: {
        recallUuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns recall details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Recall']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Recall']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Recall']
        }
      }
      /** @description Not found if no recall uuid */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Recall']
        }
      }
    }
  }
  updateRecall: {
    parameters: {
      query?: never
      header?: never
      path: {
        recallUuid: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateRecall']
      }
    }
    responses: {
      /** @description Returns court case UUID */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SaveRecallResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SaveRecallResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SaveRecallResponse']
        }
      }
    }
  }
  get: {
    parameters: {
      query?: never
      header?: never
      path: {
        courtCaseUuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns court case details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyCourtCase']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyCourtCase']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyCourtCase']
        }
      }
      /** @description Not found if no court case at uuid */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyCourtCase']
        }
      }
    }
  }
  update: {
    parameters: {
      query?: never
      header?: never
      path: {
        courtCaseUuid: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LegacyCreateCourtCase']
      }
    }
    responses: {
      /** @description court case updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        courtCaseUuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description court case deleted */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        lifetimeUuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns court appearance details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyCourtAppearance']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyCourtAppearance']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyCourtAppearance']
        }
      }
      /** @description Not found if no court appearance at uuid */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyCourtAppearance']
        }
      }
    }
  }
  update_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        lifetimeUuid: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LegacyCreateCourtAppearance']
      }
    }
    responses: {
      /** @description court appearance updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  delete_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        lifetimeUuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_2: {
    parameters: {
      query?: never
      header?: never
      path: {
        lifetimeUuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns charge details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyCharge']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyCharge']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyCharge']
        }
      }
    }
  }
  update_2: {
    parameters: {
      query?: never
      header?: never
      path: {
        lifetimeUuid: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LegacyCreateCharge']
      }
    }
    responses: {
      /** @description charge updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  delete_2: {
    parameters: {
      query?: never
      header?: never
      path: {
        lifetimeUuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getCourtCaseDetails: {
    parameters: {
      query?: never
      header?: never
      path: {
        courtCaseUuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns court case details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtCase']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtCase']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtCase']
        }
      }
      /** @description Not found if no court case at uuid */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtCase']
        }
      }
    }
  }
  putCourtCase: {
    parameters: {
      query?: never
      header?: never
      path: {
        courtCaseUuid: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCourtCase']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateCourtCaseResponse']
        }
      }
      /** @description Returns court case UUID */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateCourtCaseResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateCourtCaseResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateCourtCaseResponse']
        }
      }
    }
  }
  deleteCourtCase: {
    parameters: {
      query?: never
      header?: never
      path: {
        courtCaseUuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  refreshCaseReferences: {
    parameters: {
      query?: never
      header?: never
      path: {
        courtCaseUuid: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CourtCaseLegacyData']
      }
    }
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  updateCourtAppearanceByLifetime: {
    parameters: {
      query?: never
      header?: never
      path: {
        lifetimeUuid: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCourtAppearance']
      }
    }
    responses: {
      /** @description Returns court case UUID */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CreateCourtAppearanceResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CreateCourtAppearanceResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CreateCourtAppearanceResponse']
        }
      }
    }
  }
  getCourtAppearanceDetails: {
    parameters: {
      query?: never
      header?: never
      path: {
        appearanceUuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns court appearance details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CourtAppearance']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CourtAppearance']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CourtAppearance']
        }
      }
      /** @description Not found if no court appearance at uuid */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CourtAppearance']
        }
      }
    }
  }
  updateCourtAppearance: {
    parameters: {
      query?: never
      header?: never
      path: {
        appearanceUuid: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCourtAppearance']
      }
    }
    responses: {
      /** @description Returns court case UUID */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CreateCourtAppearanceResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CreateCourtAppearanceResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CreateCourtAppearanceResponse']
        }
      }
    }
  }
  deleteAppearance: {
    parameters: {
      query?: never
      header?: never
      path: {
        appearanceUuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getChargeDetails_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        chargeUuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns charge details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['Charge']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['Charge']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['Charge']
        }
      }
      /** @description Not found if no charge at uuid */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['Charge']
        }
      }
    }
  }
  updateCharge: {
    parameters: {
      query?: never
      header?: never
      path: {
        chargeUuid: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCharge']
      }
    }
    responses: {
      /** @description Returns court case UUID */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CreateChargeResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CreateChargeResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CreateChargeResponse']
        }
      }
    }
  }
  deleteCharge: {
    parameters: {
      query?: never
      header?: never
      path: {
        chargeUuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  createRecall: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateRecall']
      }
    }
    responses: {
      /** @description Returns recall UUID */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SaveRecallResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SaveRecallResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SaveRecallResponse']
        }
      }
    }
  }
  create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LegacyCreateCourtCase']
      }
    }
    responses: {
      /** @description court case created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyCourtCaseCreatedResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyCourtCaseCreatedResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyCourtCaseCreatedResponse']
        }
      }
    }
  }
  create_1: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LegacyCreateCourtAppearance']
      }
    }
    responses: {
      /** @description court appearance created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyCourtAppearanceCreatedResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyCourtAppearanceCreatedResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyCourtAppearanceCreatedResponse']
        }
      }
    }
  }
  create_2: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LegacyCreateCharge']
      }
    }
    responses: {
      /** @description charge created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyChargeCreatedResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyChargeCreatedResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyChargeCreatedResponse']
        }
      }
    }
  }
  createCourtCase: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCourtCase']
      }
    }
    responses: {
      /** @description Returns court case UUID */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateCourtCaseResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateCourtCaseResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateCourtCaseResponse']
        }
      }
    }
  }
  createCourtAppearance: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCourtAppearance']
      }
    }
    responses: {
      /** @description Returns court case UUID */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CreateCourtAppearanceResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CreateCourtAppearanceResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CreateCourtAppearanceResponse']
        }
      }
    }
  }
  createChargeInAppearance: {
    parameters: {
      query?: never
      header?: never
      path: {
        appearanceUuid: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCharge']
      }
    }
    responses: {
      /** @description Returns charge UUID */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CreateChargeResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CreateChargeResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CreateChargeResponse']
        }
      }
    }
  }
  createCharge: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCharge']
      }
    }
    responses: {
      /** @description Returns court case UUID */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CreateChargeResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CreateChargeResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CreateChargeResponse']
        }
      }
    }
  }
  getChargeDetails: {
    parameters: {
      query?: never
      header?: never
      path: {
        sentenceUuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns sentence details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['Sentence']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['Sentence']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['Sentence']
        }
      }
      /** @description Not found if no charge at uuid */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['Sentence']
        }
      }
    }
  }
  getSentenceTypeByUuid: {
    parameters: {
      query?: never
      header?: never
      path: {
        sentenceTypeUuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns sentence */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceType']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceType']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceType']
        }
      }
      /** @description Not found if no sentence type at uuid */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceType']
        }
      }
    }
  }
  getSentenceTypesByIds: {
    parameters: {
      query: {
        uuids: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns sentence types */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceType'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceType'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceType'][]
        }
      }
    }
  }
  searchSentenceTypes: {
    parameters: {
      query: {
        age: number
        convictionDate: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns sentence types */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceType'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceType'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceType'][]
        }
      }
    }
  }
  getRecallsByPrisonerId: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonerId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns all recalls for person */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Recall'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Recall'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Recall'][]
        }
      }
    }
  }
  getPersonDetails: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonerId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns person details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonDetails']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonDetails']
        }
      }
    }
  }
  getLatestAppearanceDetails: {
    parameters: {
      query?: never
      header?: never
      path: {
        courtCaseUuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns latest appearance details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtAppearance']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtAppearance']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtAppearance']
        }
      }
      /** @description Not found if no court case at uuid */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtAppearance']
        }
      }
    }
  }
  searchCourtCases: {
    parameters: {
      query: {
        prisonerId: string
        pageable: components['schemas']['Pageable']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns court cases */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageCourtCase']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageCourtCase']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageCourtCase']
        }
      }
    }
  }
  getChargeOutcomeByUuid: {
    parameters: {
      query?: never
      header?: never
      path: {
        outcomeUuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns charge outcome */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ChargeOutcome']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ChargeOutcome']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ChargeOutcome']
        }
      }
      /** @description Not found if no charge outcome at uuid */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ChargeOutcome']
        }
      }
    }
  }
  getChargeOutcomesByIds: {
    parameters: {
      query: {
        uuids: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns charge outcomes */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ChargeOutcome'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ChargeOutcome'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ChargeOutcome'][]
        }
      }
    }
  }
  getAllChargeOutcomes: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns charge outcomes */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ChargeOutcome'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ChargeOutcome'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ChargeOutcome'][]
        }
      }
    }
  }
  getAppearanceOutcomeByUuid: {
    parameters: {
      query?: never
      header?: never
      path: {
        outcomeUuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns appearance outcome */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtAppearanceOutcome']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtAppearanceOutcome']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtAppearanceOutcome']
        }
      }
      /** @description Not found if no appearance outcome at uuid */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtAppearanceOutcome']
        }
      }
    }
  }
  getAllAppearanceOutcomes: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns appearance outcomes */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtAppearanceOutcome'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtAppearanceOutcome'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtAppearanceOutcome'][]
        }
      }
    }
  }
  disassociateChargeWithAppearance: {
    parameters: {
      query?: never
      header?: never
      path: {
        appearanceUuid: string
        chargeUuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
}
