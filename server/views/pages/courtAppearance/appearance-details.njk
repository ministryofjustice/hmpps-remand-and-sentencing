{% extends "../../partials/prisonerBannerBackLayout.njk" %}
{% from "govuk/components/summary-list/macro.njk" import govukSummaryList %}
{% from "hmpps/components/court-cases-release-dates/offence-card/macro.njk" import offenceCard %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/inset-text/macro.njk" import govukInsetText %}

{% set pageTitle = applicationName + " - Appearance details" %}

{% set appearanceSummaryRows = [
 
    {
        key: {
        text: "Case reference"
    },
        value: {
        text: appearance.caseReferenceNumber
    },
        actions: {
        items: [
            {
                href: "/person/" + nomsId + "/" + addOrEditCourtCase + "/" + courtCaseReference + "/" + addOrEditCourtAppearance + "/" + appearanceReference + "/reference",
                text: "Edit",
                visuallyHiddenText: "case reference"
            }
        ]
    }
    },
    {
        key: {
        text: "Warrant date"
    },
        value: {
        text: appearance.warrantDate | formatDate
    },
        actions: {
        items: [
            {
                href: "/person/" + nomsId + "/" + addOrEditCourtCase + "/" + courtCaseReference + "/" + addOrEditCourtAppearance + "/" + appearanceReference + "/warrant-date",
                text: "Edit",
                visuallyHiddenText: "warrant date"
            }
        ]
    }
    }
] %}

{% set appearanceSummaryRows = appearanceSummaryRows.concat({
    key: {
        text: "Location"
    },
    value: {
        text: courtMap[appearance.courtCode] if courtMap[appearance.courtCode] else appearance.courtCode
    },
    actions: {
        items: [
            {
                href: "/person/" + nomsId + "/" + addOrEditCourtCase + "/" + courtCaseReference + "/" + addOrEditCourtAppearance + "/" + appearanceReference + "/court-name",
                text: "Edit",
                visuallyHiddenText: "location"
            }
        ]
    }
}) %}
    {% set appearanceSummaryRows = appearanceSummaryRows.concat({
        key: {
            text: "Overall case outcome"
        },
        value: {
            text: overallCaseOutcome
        },
        actions: {
            items: [
                {
                    href: "/person/" + nomsId + "/" + addOrEditCourtCase + "/" + courtCaseReference + "/" + addOrEditCourtAppearance + "/" + appearanceReference + "/overall-case-outcome",
                    text: "Edit",
                    visuallyHiddenText: "overall case outcome"
                }
            ]
        }
    }) %}

{% set nextHearingSummaryRows = [{
    key: {
        text: "Next hearing set"
    },
    value: {
        text: "Yes" if appearance.nextHearingSelect else "No"
    },
    actions: {
        items: [
            {
                href: "/person/" + nomsId + "/" + addOrEditCourtCase + "/" + courtCaseReference + "/" + addOrEditCourtAppearance + "/" + appearanceReference + "/next-hearing-select",
                text: "Edit",
                visuallyHiddenText: "Next hearing set"
            }
        ]
    }
}] %}

{% if appearance.nextHearingSelect %}
    {% set nextHearingSummaryRows = nextHearingSummaryRows.concat([
        {
            key: {
            text: "Location"
        },
            value: {
            text: courtMap[appearance.nextHearingCourtCode]
        },
            actions: {
            items: [
                {
                    href: "/person/" + nomsId + "/" + addOrEditCourtCase + "/" + courtCaseReference + "/" + addOrEditCourtAppearance + "/" + appearanceReference + "/next-hearing-court-name",
                    text: "Edit",
                    visuallyHiddenText: "Next hearing court name"
                }
            ]
        }
        },
        {
            key: {
            text: "Hearing type"
        },
            value: {
            text: appearanceTypeDescription
        },
            actions: {
            items: [
                {
                    href: "/person/" + nomsId + "/" + addOrEditCourtCase + "/" + courtCaseReference + "/" + addOrEditCourtAppearance + "/" + appearanceReference + "/next-hearing-type",
                    text: "Edit",
                    visuallyHiddenText: "Next hearing type"
                }
            ]
        }
        },
        {
            key: {
            text: "Date"
        },
            value: {
            text: appearance.nextHearingDate | formatDateTime(appearance.nextHearingTimeSet)
        },
            actions: {
            items: [
                {
                    href: "/person/" + nomsId + "/" + addOrEditCourtCase + "/" + courtCaseReference + "/" + addOrEditCourtAppearance + "/" + appearanceReference + "/next-hearing-date",
                    text: "Edit",
                    visuallyHiddenText: "next hearing date"
                }
            ]
        }
        }
    ]) %}
{% endif %}


{% block content %}
    {{ super() }}
    <div class="govuk-grid-row govuk-!-margin-top-4">
        <div class="govuk-grid-column-two-thirds">
            <span class="govuk-caption-l">
                {% if appearance.caseReferenceNumber %}
                    {{ appearance.caseReferenceNumber }} at {{ courtMap[appearance.courtCode] if courtMap[appearance.courtCode] else appearance.courtCode }} on {{ appearance.warrantDate | formatDate }}
                {% else %}
                    Case held at {{ courtMap[appearance.courtCode] if courtMap[appearance.courtCode] else appearance.courtCode }}
                {% endif %}
            </span>
            <h1 class="govuk-heading-l">Edit appearance</h1>

            {{ govukSummaryList({
                rows: appearanceSummaryRows,
                attributes: {
                    "data-qa": "appearanceSummaryList"
                }
            }) }}

            <h2 class="govuk-heading-m">Next hearing</h2>
            {{ govukSummaryList({
                    rows: nextHearingSummaryRows,
                    attributes: {
                        "data-qa": "nextHearingSummaryList"
                    }
                }) }}

            <h2 class="govuk-heading-m">Offences <span class="govuk-body">({{ appearance.offences | length }})</span></h2>

            {{ govukButton({
                text: "Add an offence" ,
                classes: "govuk-button--link",
                href: "/person/" + nomsId + "/" + addOrEditCourtCase + "/" + courtCaseReference  + "/" + addOrEditCourtAppearance + "/" + appearanceReference + "/offences/" + appearance.offences | length + "/add-another-offence",
                attributes: {
                    "data-qa": "addAnotherOffence"
                }
            }) }}
    <span data-qa="allOffences">  
        {% for offence in appearance.offences %}
                        {{
                        offenceCard({
                            offenceCode: offence.offenceCode,
                            offenceName: offenceMap[offence.offenceCode],
                            offenceStartDate: offence.offenceStartDate | formatDate if offence.offenceStartDate else 'Not entered',
                            offenceEndDate: offence.offenceEndDate | formatDate,
                            outcome: outcomeMap[offence.outcomeUuid] | chargeOutcomeOrLegacy(offence.legacyData),
                            countNumber: offence.sentence.countNumber,
                            lineNumber: offence.sentence.legacyData.nomisLineReference if offence.sentence and offence.sentence.legacyData,
                            convictionDate: offence.sentence.convictionDate | formatDate,
                            terrorRelated: offence.terrorRelated,
                            isSentenced: offence.sentence,
                            periodLengths: offence.sentence.periodLengths,
                            sentenceServeType: offence.sentence.sentenceServeType,
                            consecutiveTo: consecutiveToSentenceDetailsMap[offence.sentence.consecutiveToSentenceUuid],
                            sentenceType: sentenceTypeMap[offence.sentence.sentenceTypeId] | sentenceTypeValueOrLegacy(offence.sentence.legacyData),
                            fineAmount: offence.sentence.fineAmount,
                            actions: {
                                items: [
                                    {
                                        href: "/person/" + nomsId + "/" + addOrEditCourtCase + "/" + courtCaseReference + "/" + addOrEditCourtAppearance + "/" + appearanceReference + "/offences/" + loop.index0 + "/edit-offence",
                                        text: "Edit",
                                        visuallyHiddenText: "edit"
                                    },
                                    {
                                        href: "/person/" + nomsId + "/" + addOrEditCourtCase + "/" + courtCaseReference + "/" + addOrEditCourtAppearance + "/" + appearanceReference + "/offences/" + loop.index0 + "/delete-offence",
                                        text: "Delete",
                                        visuallyHiddenText: "delete"
                                    }
                                ]
                            }
                        })
                        }}
            {% endfor %}
        </span>

            

            <form method="post" action="/person/{{ nomsId }}/{{ addOrEditCourtCase }}/{{ courtCaseReference }}/{{ addOrEditCourtAppearance }}/{{ appearanceReference }}/remand/submit-details-edit">
                <input type="hidden" name="_csrf" value="{{ csrfToken }}">
                <div class="govuk-button-group">
                    {{ govukButton({
                        text: "Confirm changes",
                        preventDoubleClick: true,
                        attributes: { 'data-qa': 'confirm-button' }
                    }) }}
                    <a class="govuk-link" href="/person/{{ nomsId }}/{{ addOrEditCourtCase }}/{{ courtCaseReference }}/details">Cancel changes</a>
                </div>
            </form>
        </div>
    </div>
{% endblock %}