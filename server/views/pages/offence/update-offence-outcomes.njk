{% extends "../../partials/appearanceDetailsLayout.njk" %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/radios/macro.njk" import govukRadios %}
{% from "hmpps/components/court-cases-release-dates/offence-card/macro.njk" import offenceCard %}
{% from "govuk/components/inset-text/macro.njk" import govukInsetText %}

{% set pageTitle = applicationName + " - Update offence outcomes" %}
{% set hideOffences = true %}
{% block pageContent %}
        <h1 class="govuk-heading-l">Update offence outcomes</h1>
                    {% if mergedFromText %}
                        {{ govukInsetText({
                            text: mergedFromText,
                            classes: "govuk-!-margin-bottom-3",
                            attributes: {
                                "data-qa": "mergedFromText"
                            }
                        }) }}
                    {% endif %}
    {% if courtAppearance.hasOverallSentenceLength === 'true' %}
        {{ govukSummaryList({
                rows: [
                    {
                        key: {
                            text: "Overall sentence length"
                        },
                        value: {
                            text: courtAppearance.overallSentenceLength | formatLengths
                        }
                    }
                ],
                attributes: {
                    "data-qa": "overallSentenceLengthComparison"
                }
            }) }}
    {% endif %}

    {{ govukButton({
                text: "Add an offence" ,
                classes: "govuk-button--link",
                href: "/person/" + nomsId + "/" + addOrEditCourtCase + "/" + courtCaseReference  + "/" + addOrEditCourtAppearance + "/" + appearanceReference + "/offences/" + courtAppearance.offences | length + "/add-another-offence",
                attributes: {
                    "data-qa": "addAnotherOffence"
                }
            }) }}

    <h2 class="govuk-heading-m govuk-!-margin-top-8">Offences with outcomes that need updating ({{ unchangedOffences.length }})</h2>

    {% for offence in unchangedOffences %}
        {% set offenceId = 'offences.' + offence.index %}
        {{
        offenceCard({
            offenceCode: offence.offenceCode,
            offenceName: offenceMap[offence.offenceCode],
            offenceStartDate: offence.offenceStartDate | formatDate if offence.offenceStartDate else 'Not entered',
            offenceEndDate: offence.offenceEndDate | formatDate,
            outcome: outcomeMap[offence.outcomeUuid] | chargeOutcomeOrLegacy(offence.legacyData),
            outcomeUpdated: offence.updatedOutcome,
            countNumber: offence.sentence.countNumber,
            lineNumber: offence.sentence.legacyData.nomisLineReference if offence.sentence and offence.sentence.legacyData,
            convictionDate: offence.sentence.convictionDate | formatDate,
            terrorRelated: offence.terrorRelated,
            isSentenced: offence.sentence,
            periodLengths: offence.sentence.periodLengths,
            sentenceType: sentenceTypeMap[offence.sentence.sentenceTypeId] if offence.sentence,
            sentenceServeType: offence.sentence.sentenceServeType if offence.sentence,
            consecutiveTo: sessionConsecutiveToSentenceDetailsMap[offence.sentence.consecutiveToSentenceUuid] if offence.sentence and offence.sentence.consecutiveToSentenceUuid else consecutiveToSentenceDetailsMap[offence.sentence.consecutiveToSentenceUuid],
            fineAmount: offence.sentence.fineAmount,
            mergedFromCase: offence.mergedFromCase,
            courtDetails: courtMap,
            actions: {
                items: [
                    {
                        href: "/person/" + nomsId + "/" + addOrEditCourtCase + "/" + courtCaseReference + "/" + addOrEditCourtAppearance + "/" + appearanceReference + "/offences/" + offence.chargeUuid + "/load-edit-offence",
                        text: "Edit",
                        visuallyHiddenText: "edit offence"
                    }
                ]
            },
            listItems: {
                classes: "govuk-!-margin-top-4 govuk-!-margin-bottom-2",
                items: [{
                    html: '<a href="/person/'+ nomsId + '/' + addOrEditCourtCase + '/' + courtCaseReference  + '/' + addOrEditCourtAppearance + '/' + appearanceReference + '/offences/' + offence.chargeUuid + '/update-offence-outcome" data-qa="update-outcome-link-'+ offence.chargeUuid +'">Update outcome</a>'
                }]
            },
            id: offenceId,
            errorMessage: errors | findErrorsBeginningWith(offenceId)

        })
    }}
    {% else %}
        {{ govukInsetText({
                    text: "There are no offences that need updating."
                }) }}
    {% endfor %}

    <hr class="govuk-section-break govuk-section-break--l govuk-!-margin-top-8 govuk-section-break--visible">

    <h2 class="govuk-heading-m govuk-!-margin-top-8">Offences with updated outcomes ({{custodialChangedOffences.length + nonCustodialChangedOffences.length}})</h2>

    <h3 class="govuk-heading-s govuk-!-margin-top-8">Offences with custodial outcomes</h3>

    {% for offence in custodialChangedOffences %}
        {% set offenceId = 'offences.' + offence.index %}
        {{
                    offenceCard({
                        offenceCode: offence.offenceCode,
                        offenceName: offenceMap[offence.offenceCode],
                        offenceStartDate: offence.offenceStartDate | formatDate if offence.offenceStartDate else 'Not entered',
                        offenceEndDate: offence.offenceEndDate | formatDate,
                        outcome: outcomeMap[offence.outcomeUuid] | chargeOutcomeOrLegacy(offence.legacyData),
                        outcomeUpdated: offence.updatedOutcome,
                        countNumber: offence.sentence.countNumber,
                        lineNumber: offence.sentence.legacyData.nomisLineReference if offence.sentence and offence.sentence.legacyData,
                        convictionDate: offence.sentence.convictionDate | formatDate,
                        terrorRelated: offence.terrorRelated,
                        isSentenced: offence.sentence,
                        periodLengths: offence.sentence.periodLengths,
                        sentenceServeType: offence.sentence.sentenceServeType if offence.sentence,
                        sentenceType: sentenceTypeMap[offence.sentence.sentenceTypeId] if offence.sentence,
                        consecutiveTo: sessionConsecutiveToSentenceDetailsMap[offence.sentence.consecutiveToSentenceUuid] if offence.sentence and offence.sentence.consecutiveToSentenceUuid else consecutiveToSentenceDetailsMap[offence.sentence.consecutiveToSentenceUuid],
                        fineAmount: offence.sentence.fineAmount,
                        mergedFromCase: offence.mergedFromCase,
                        courtDetails: courtMap,
                        actions: {
                            items: [
                                {
                                    href: "/person/" + nomsId + "/" + addOrEditCourtCase + "/" + courtCaseReference  + "/" + addOrEditCourtAppearance + "/" + appearanceReference + "/offences/" + offence.chargeUuid + "/load-edit-offence",
                                    text: "Edit",
                                    visuallyHiddenText: "edit offence"
                                }
                            ]
                        },
                        id: offenceId,
                        errorMessage: errors | findErrorsBeginningWith(offenceId)
                    })
                }}
    {% else %}
        {{ govukInsetText({
                    text: "There are no offences with custodial outcomes."
                }) }}
    {% endfor %}

    <h3 class="govuk-heading-s govuk-!-margin-top-8">Offences with non-custodial outcomes</h3>

    {% for offence in nonCustodialChangedOffences %}
        {% set offenceId = 'offences.' + offence.index %}
        {{
                    offenceCard({
                        offenceCode: offence.offenceCode,
                        offenceName: offenceMap[offence.offenceCode],
                        offenceStartDate: offence.offenceStartDate | formatDate if offence.offenceStartDate else 'Not entered',
                        offenceEndDate: offence.offenceEndDate | formatDate,
                        outcome: outcomeMap[offence.outcomeUuid] | chargeOutcomeOrLegacy(offence.legacyData),
                        outcomeUpdated: offence.updatedOutcome,
                        countNumber: offence.sentence.countNumber,
                        lineNumber: offence.sentence.legacyData.nomisLineReference if offence.sentence and offence.sentence.legacyData,
                        convictionDate: offence.sentence.convictionDate | formatDate,
                        terrorRelated: offence.terrorRelated,
                        isSentenced: offence.sentence,
                        periodLengths: offence.sentence.periodLengths,
                        sentenceServeType: offence.sentence.sentenceServeType if offence.sentence,
                        sentenceType: sentenceTypeMap[offence.sentence.sentenceTypeId] if offence.sentence,
                        consecutiveTo: sessionConsecutiveToSentenceDetailsMap[offence.sentence.consecutiveToSentenceUuid] if offence.sentence and offence.sentence.consecutiveToSentenceUuid else consecutiveToSentenceDetailsMap[offence.sentence.consecutiveToSentenceUuid],
                        fineAmount: offence.sentence.fineAmount,
                        mergedFromCase: offence.mergedFromCase,
                        courtDetails: courtMap,
                        actions: {
                            items: [
                                {
                                    href: "/person/" + nomsId + "/" + addOrEditCourtCase + "/" + courtCaseReference  + "/" + addOrEditCourtAppearance + "/" + appearanceReference + "/offences/" + offence.chargeUuid + "/load-edit-offence",
                                    text: "Edit",
                                    visuallyHiddenText: "edit offence"
                                }
                            ]
                        },
                        id: offenceId,
                        errorMessage: errors | findErrorsBeginningWith(offenceId)
                    })
                }}
    {% else %}
        {{ govukInsetText({
                    text: "There are no offences with non-custodial outcomes."
                }) }}
    {% endfor %}

    <form method="post" action="/person/{{ nomsId }}/{{ addOrEditCourtCase }}/{{ courtCaseReference }}/{{ addOrEditCourtAppearance }}/{{ appearanceReference }}/submit-update-offence-outcomes" autocomplete="off">
        <input type="hidden" name="_csrf" value="{{ csrfToken }}">
        {{ govukRadios({
                        name: "finishedReviewOffenceOutcomes",
                        fieldset: {
                            legend: {
                            text: "Have you finished updating offence outcomes?",
                            isPageHeading: false,
                            classes: "govuk-fieldset__legend--m"
                            }
                        },
                        errorMessage: errors | findError("finishedReviewOffenceOutcomes"),
                        items: [
                            {
                                value: "true",
                                text: "Yes, I've finished reviewing offences"
                            },
                            {
                                value: "false",
                                text: "No, I'll come back to it later"
                            }
                        ]
                    }) }}

        {{ govukButton({
                    text: "Continue",
                    attributes: {  'data-qa': 'continue-button' }
                }) }}
    </form>

{% endblock %}
